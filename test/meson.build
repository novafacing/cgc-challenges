bash = find_program('bash')

test('test AIS-Lite', bash, args: ['-c', challenge_AIS_Lite.full_path() + ' < ' + poller_targets['AIS-Lite'].full_path() / 'poll_AIS-Lite_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test ASCII_Content_Server', bash, args: ['-c', challenge_ASCII_Content_Server.full_path() + ' < ' + poller_targets['ASCII_Content_Server'].full_path() / 'poll_ASCII_Content_Server_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test ASL6parse', bash, args: ['-c', challenge_ASL6parse.full_path() + ' < ' + poller_targets['ASL6parse'].full_path() / 'poll_ASL6parse_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Audio_Visualizer', bash, args: ['-c', challenge_Audio_Visualizer.full_path() + ' < ' + poller_targets['Audio_Visualizer'].full_path() / 'poll_Audio_Visualizer_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Barcoder', bash, args: ['-c', challenge_Barcoder.full_path() + ' < ' + poller_targets['Barcoder'].full_path() / 'poll_Barcoder_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test BitBlaster', bash, args: ['-c', challenge_BitBlaster.full_path() + ' < ' + poller_targets['BitBlaster'].full_path() / 'poll_BitBlaster_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Bloomy_Sunday', bash, args: ['-c', challenge_Bloomy_Sunday.full_path() + ' < ' + poller_targets['Bloomy_Sunday'].full_path() / 'poll_Bloomy_Sunday_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Board_Game', bash, args: ['-c', challenge_Board_Game.full_path() + ' < ' + poller_targets['Board_Game'].full_path() / 'poll_Board_Game_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test BudgIT', bash, args: ['-c', challenge_BudgIT.full_path() + ' < ' + poller_targets['BudgIT'].full_path() / 'poll_BudgIT_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test CGC_Hangman_Game', bash, args: ['-c', challenge_CGC_Hangman_Game.full_path() + ' < ' + poller_targets['CGC_Hangman_Game'].full_path() / 'poll_CGC_Hangman_Game_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test CGC_Symbol_Viewer_CSV', bash, args: ['-c', challenge_CGC_Symbol_Viewer_CSV.full_path() + ' < ' + poller_targets['CGC_Symbol_Viewer_CSV'].full_path() / 'poll_CGC_Symbol_Viewer_CSV_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test CNMP', bash, args: ['-c', challenge_CNMP.full_path() + ' < ' + poller_targets['CNMP'].full_path() / 'poll_CNMP_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test COLLIDEOSCOPE', bash, args: ['-c', challenge_COLLIDEOSCOPE.full_path() + ' < ' + poller_targets['COLLIDEOSCOPE'].full_path() / 'poll_COLLIDEOSCOPE_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test CTTP', bash, args: ['-c', challenge_CTTP.full_path() + ' < ' + poller_targets['CTTP'].full_path() / 'poll_CTTP_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test CableGrind', bash, args: ['-c', challenge_CableGrind.full_path() + ' < ' + poller_targets['CableGrind'].full_path() / 'poll_CableGrind_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test CableGrindLlama', bash, args: ['-c', challenge_CableGrindLlama.full_path() + ' < ' + poller_targets['CableGrindLlama'].full_path() / 'poll_CableGrindLlama_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Casino_Games', bash, args: ['-c', challenge_Casino_Games.full_path() + ' < ' + poller_targets['Casino_Games'].full_path() / 'poll_Casino_Games_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Cereal_Mixup__A_Cereal_Vending_Machine_Controller', bash, args: ['-c', challenge_Cereal_Mixup__A_Cereal_Vending_Machine_Controller.full_path() + ' < ' + poller_targets['Cereal_Mixup__A_Cereal_Vending_Machine_Controller'].full_path() / 'poll_Cereal_Mixup__A_Cereal_Vending_Machine_Controller_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Character_Statistics', bash, args: ['-c', challenge_Character_Statistics.full_path() + ' < ' + poller_targets['Character_Statistics'].full_path() / 'poll_Character_Statistics_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Checkmate', bash, args: ['-c', challenge_Checkmate.full_path() + ' < ' + poller_targets['Checkmate'].full_path() / 'poll_Checkmate_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Childs_Game', bash, args: ['-c', challenge_Childs_Game.full_path() + ' < ' + poller_targets['Childs_Game'].full_path() / 'poll_Childs_Game_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Cromulence_All_Service', bash, args: ['-c', challenge_Cromulence_All_Service.full_path() + ' < ' + poller_targets['Cromulence_All_Service'].full_path() / 'poll_Cromulence_All_Service_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test DFARS_Sample_Service', bash, args: ['-c', challenge_DFARS_Sample_Service.full_path() + ' < ' + poller_targets['DFARS_Sample_Service'].full_path() / 'poll_DFARS_Sample_Service_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Diary_Parser', bash, args: ['-c', challenge_Diary_Parser.full_path() + ' < ' + poller_targets['Diary_Parser'].full_path() / 'poll_Diary_Parser_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Differ', bash, args: ['-c', challenge_Differ.full_path() + ' < ' + poller_targets['Differ'].full_path() / 'poll_Differ_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Diophantine_Password_Wallet', bash, args: ['-c', challenge_Diophantine_Password_Wallet.full_path() + ' < ' + poller_targets['Diophantine_Password_Wallet'].full_path() / 'poll_Diophantine_Password_Wallet_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Dive_Logger', bash, args: ['-c', challenge_Dive_Logger.full_path() + ' < ' + poller_targets['Dive_Logger'].full_path() / 'poll_Dive_Logger_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Divelogger2', bash, args: ['-c', challenge_Divelogger2.full_path() + ' < ' + poller_targets['Divelogger2'].full_path() / 'poll_Divelogger2_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Document_Rendering_Engine', bash, args: ['-c', challenge_Document_Rendering_Engine.full_path() + ' < ' + poller_targets['Document_Rendering_Engine'].full_path() / 'poll_Document_Rendering_Engine_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test ECM_TCM_Simulator', bash, args: ['-c', challenge_ECM_TCM_Simulator.full_path() + ' < ' + poller_targets['ECM_TCM_Simulator'].full_path() / 'poll_ECM_TCM_Simulator_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Eddy', bash, args: ['-c', challenge_Eddy.full_path() + ' < ' + poller_targets['Eddy'].full_path() / 'poll_Eddy_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Email_System_2', bash, args: ['-c', challenge_Email_System_2.full_path() + ' < ' + poller_targets['Email_System_2'].full_path() / 'poll_Email_System_2_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test FISHYXML', bash, args: ['-c', challenge_FISHYXML.full_path() + ' < ' + poller_targets['FISHYXML'].full_path() / 'poll_FISHYXML_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test FSK_BBS', bash, args: ['-c', challenge_FSK_BBS.full_path() + ' < ' + poller_targets['FSK_BBS'].full_path() / 'poll_FSK_BBS_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test FSK_Messaging_Service', bash, args: ['-c', challenge_FSK_Messaging_Service.full_path() + ' < ' + poller_targets['FSK_Messaging_Service'].full_path() / 'poll_FSK_Messaging_Service_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test FablesReport', bash, args: ['-c', challenge_FablesReport.full_path() + ' < ' + poller_targets['FablesReport'].full_path() / 'poll_FablesReport_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Facilities_Access_Control_System', bash, args: ['-c', challenge_Facilities_Access_Control_System.full_path() + ' < ' + poller_targets['Facilities_Access_Control_System'].full_path() / 'poll_Facilities_Access_Control_System_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test FailAV', bash, args: ['-c', challenge_FailAV.full_path() + ' < ' + poller_targets['FailAV'].full_path() / 'poll_FailAV_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test FileSys', bash, args: ['-c', challenge_FileSys.full_path() + ' < ' + poller_targets['FileSys'].full_path() / 'poll_FileSys_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Filesystem_Command_Shell', bash, args: ['-c', challenge_Filesystem_Command_Shell.full_path() + ' < ' + poller_targets['Filesystem_Command_Shell'].full_path() / 'poll_Filesystem_Command_Shell_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Finicky_File_Folder', bash, args: ['-c', challenge_Finicky_File_Folder.full_path() + ' < ' + poller_targets['Finicky_File_Folder'].full_path() / 'poll_Finicky_File_Folder_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Flash_File_System', bash, args: ['-c', challenge_Flash_File_System.full_path() + ' < ' + poller_targets['Flash_File_System'].full_path() / 'poll_Flash_File_System_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Flight_Routes', bash, args: ['-c', challenge_Flight_Routes.full_path() + ' < ' + poller_targets['Flight_Routes'].full_path() / 'poll_Flight_Routes_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Fortress', bash, args: ['-c', challenge_Fortress.full_path() + ' < ' + poller_targets['Fortress'].full_path() / 'poll_Fortress_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test GPS_Tracker', bash, args: ['-c', challenge_GPS_Tracker.full_path() + ' < ' + poller_targets['GPS_Tracker'].full_path() / 'poll_GPS_Tracker_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test GREYMATTER', bash, args: ['-c', challenge_GREYMATTER.full_path() + ' < ' + poller_targets['GREYMATTER'].full_path() / 'poll_GREYMATTER_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Game_Night', bash, args: ['-c', challenge_Game_Night.full_path() + ' < ' + poller_targets['Game_Night'].full_path() / 'poll_Game_Night_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Glue', bash, args: ['-c', challenge_Glue.full_path() + ' < ' + poller_targets['Glue'].full_path() / 'poll_Glue_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test GreatView', bash, args: ['-c', challenge_GreatView.full_path() + ' < ' + poller_targets['GreatView'].full_path() / 'poll_GreatView_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Gridder', bash, args: ['-c', challenge_Gridder.full_path() + ' < ' + poller_targets['Gridder'].full_path() / 'poll_Gridder_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Grit', bash, args: ['-c', challenge_Grit.full_path() + ' < ' + poller_targets['Grit'].full_path() / 'poll_Grit_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test H20FlowInc', bash, args: ['-c', challenge_H20FlowInc.full_path() + ' < ' + poller_targets['H20FlowInc'].full_path() / 'poll_H20FlowInc_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test HIGHCOO', bash, args: ['-c', challenge_HIGHCOO.full_path() + ' < ' + poller_targets['HIGHCOO'].full_path() / 'poll_HIGHCOO_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test HackMan', bash, args: ['-c', challenge_HackMan.full_path() + ' < ' + poller_targets['HackMan'].full_path() / 'poll_HackMan_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Headscratch', bash, args: ['-c', challenge_Headscratch.full_path() + ' < ' + poller_targets['Headscratch'].full_path() / 'poll_Headscratch_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test HeartThrob', bash, args: ['-c', challenge_HeartThrob.full_path() + ' < ' + poller_targets['HeartThrob'].full_path() / 'poll_HeartThrob_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test HighFrequencyTradingAlgo', bash, args: ['-c', challenge_HighFrequencyTradingAlgo.full_path() + ' < ' + poller_targets['HighFrequencyTradingAlgo'].full_path() / 'poll_HighFrequencyTradingAlgo_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Hug_Game', bash, args: ['-c', challenge_Hug_Game.full_path() + ' < ' + poller_targets['Hug_Game'].full_path() / 'poll_Hug_Game_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test INSULATR', bash, args: ['-c', challenge_INSULATR.full_path() + ' < ' + poller_targets['INSULATR'].full_path() / 'poll_INSULATR_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test KTY_Pretty_Printer', bash, args: ['-c', challenge_KTY_Pretty_Printer.full_path() + ' < ' + poller_targets['KTY_Pretty_Printer'].full_path() / 'poll_KTY_Pretty_Printer_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
# test('test Kaprica_Go', bash, args: ['-c', challenge_Kaprica_Go.full_path() + ' < ' + poller_targets['Kaprica_Go'].full_path() / 'poll_Kaprica_Go_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test LMS', bash, args: ['-c', challenge_LMS.full_path() + ' < ' + poller_targets['LMS'].full_path() / 'poll_LMS_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test LazyCalc', bash, args: ['-c', challenge_LazyCalc.full_path() + ' < ' + poller_targets['LazyCalc'].full_path() / 'poll_LazyCalc_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Loud_Square_Instant_Messaging_Protocol_LSIMP', bash, args: ['-c', challenge_Loud_Square_Instant_Messaging_Protocol_LSIMP.full_path() + ' < ' + poller_targets['Loud_Square_Instant_Messaging_Protocol_LSIMP'].full_path() / 'poll_Loud_Square_Instant_Messaging_Protocol_LSIMP_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Matchmaker', bash, args: ['-c', challenge_Matchmaker.full_path() + ' < ' + poller_targets['Matchmaker'].full_path() / 'poll_Matchmaker_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Mathematical_Solver', bash, args: ['-c', challenge_Mathematical_Solver.full_path() + ' < ' + poller_targets['Mathematical_Solver'].full_path() / 'poll_Mathematical_Solver_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Matrix_Math_Calculator', bash, args: ['-c', challenge_Matrix_Math_Calculator.full_path() + ' < ' + poller_targets['Matrix_Math_Calculator'].full_path() / 'poll_Matrix_Math_Calculator_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
# test('test Message_Service', bash, args: ['-c', challenge_Message_Service.full_path() + ' < ' + poller_targets['Message_Service'].full_path() / 'poll_Message_Service_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Modern_Family_Tree', bash, args: ['-c', challenge_Modern_Family_Tree.full_path() + ' < ' + poller_targets['Modern_Family_Tree'].full_path() / 'poll_Modern_Family_Tree_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Monster_Game', bash, args: ['-c', challenge_Monster_Game.full_path() + ' < ' + poller_targets['Monster_Game'].full_path() / 'poll_Monster_Game_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Mount_Filemore', bash, args: ['-c', challenge_Mount_Filemore.full_path() + ' < ' + poller_targets['Mount_Filemore'].full_path() / 'poll_Mount_Filemore_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Movie_Rental_Service', bash, args: ['-c', challenge_Movie_Rental_Service.full_path() + ' < ' + poller_targets['Movie_Rental_Service'].full_path() / 'poll_Movie_Rental_Service_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Movie_Rental_Service_Redux', bash, args: ['-c', challenge_Movie_Rental_Service_Redux.full_path() + ' < ' + poller_targets['Movie_Rental_Service_Redux'].full_path() / 'poll_Movie_Rental_Service_Redux_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Multi_Arena_Pursuit_Simulator', bash, args: ['-c', challenge_Multi_Arena_Pursuit_Simulator.full_path() + ' < ' + poller_targets['Multi_Arena_Pursuit_Simulator'].full_path() / 'poll_Multi_Arena_Pursuit_Simulator_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Multi_User_Calendar', bash, args: ['-c', challenge_Multi_User_Calendar.full_path() + ' < ' + poller_targets['Multi_User_Calendar'].full_path() / 'poll_Multi_User_Calendar_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Music_Store_Client', bash, args: ['-c', challenge_Music_Store_Client.full_path() + ' < ' + poller_targets['Music_Store_Client'].full_path() / 'poll_Music_Store_Client_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test NarfAgainShell', bash, args: ['-c', challenge_NarfAgainShell.full_path() + ' < ' + poller_targets['NarfAgainShell'].full_path() / 'poll_NarfAgainShell_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test NarfRPN', bash, args: ['-c', challenge_NarfRPN.full_path() + ' < ' + poller_targets['NarfRPN'].full_path() / 'poll_NarfRPN_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Network_File_System_v3', bash, args: ['-c', challenge_Network_File_System_v3.full_path() + ' < ' + poller_targets['Network_File_System_v3'].full_path() / 'poll_Network_File_System_v3_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Neural_House', bash, args: ['-c', challenge_Neural_House.full_path() + ' < ' + poller_targets['Neural_House'].full_path() / 'poll_Neural_House_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test OTPSim', bash, args: ['-c', challenge_OTPSim.full_path() + ' < ' + poller_targets['OTPSim'].full_path() / 'poll_OTPSim_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test One_Amp', bash, args: ['-c', challenge_One_Amp.full_path() + ' < ' + poller_targets['One_Amp'].full_path() / 'poll_One_Amp_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Overflow_Parking', bash, args: ['-c', challenge_Overflow_Parking.full_path() + ' < ' + poller_targets['Overflow_Parking'].full_path() / 'poll_Overflow_Parking_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test PCM_Message_decoder', bash, args: ['-c', challenge_PCM_Message_decoder.full_path() + ' < ' + poller_targets['PCM_Message_decoder'].full_path() / 'poll_PCM_Message_decoder_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test PKK_Steganography', bash, args: ['-c', challenge_PKK_Steganography.full_path() + ' < ' + poller_targets['PKK_Steganography'].full_path() / 'poll_PKK_Steganography_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test PRU', bash, args: ['-c', challenge_PRU.full_path() + ' < ' + poller_targets['PRU'].full_path() / 'poll_PRU_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Pac_for_Edges', bash, args: ['-c', challenge_Pac_for_Edges.full_path() + ' < ' + poller_targets['Pac_for_Edges'].full_path() / 'poll_Pac_for_Edges_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Packet_Analyzer', bash, args: ['-c', challenge_Packet_Analyzer.full_path() + ' < ' + poller_targets['Packet_Analyzer'].full_path() / 'poll_Packet_Analyzer_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Packet_Receiver', bash, args: ['-c', challenge_Packet_Receiver.full_path() + ' < ' + poller_targets['Packet_Receiver'].full_path() / 'poll_Packet_Receiver_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Palindrome', bash, args: ['-c', challenge_Palindrome.full_path() + ' < ' + poller_targets['Palindrome'].full_path() / 'poll_Palindrome_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Palindrome2', bash, args: ['-c', challenge_Palindrome2.full_path() + ' < ' + poller_targets['Palindrome2'].full_path() / 'poll_Palindrome2_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Parking_Permit_Management_System_PPMS', bash, args: ['-c', challenge_Parking_Permit_Management_System_PPMS.full_path() + ' < ' + poller_targets['Parking_Permit_Management_System_PPMS'].full_path() / 'poll_Parking_Permit_Management_System_PPMS_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
# test('test Particle_Simulator', bash, args: ['-c', challenge_Particle_Simulator.full_path() + ' < ' + poller_targets['Particle_Simulator'].full_path() / 'poll_Particle_Simulator_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Pattern_Finder', bash, args: ['-c', challenge_Pattern_Finder.full_path() + ' < ' + poller_targets['Pattern_Finder'].full_path() / 'poll_Pattern_Finder_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Personal_Fitness_Manager', bash, args: ['-c', challenge_Personal_Fitness_Manager.full_path() + ' < ' + poller_targets['Personal_Fitness_Manager'].full_path() / 'poll_Personal_Fitness_Manager_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Printer', bash, args: ['-c', challenge_Printer.full_path() + ' < ' + poller_targets['Printer'].full_path() / 'poll_Printer_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test QUIETSQUARE', bash, args: ['-c', challenge_QUIETSQUARE.full_path() + ' < ' + poller_targets['QUIETSQUARE'].full_path() / 'poll_QUIETSQUARE_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test QuadtreeConways', bash, args: ['-c', challenge_QuadtreeConways.full_path() + ' < ' + poller_targets['QuadtreeConways'].full_path() / 'poll_QuadtreeConways_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Recipe_Database', bash, args: ['-c', challenge_Recipe_Database.full_path() + ' < ' + poller_targets['Recipe_Database'].full_path() / 'poll_Recipe_Database_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Resort_Modeller', bash, args: ['-c', challenge_Resort_Modeller.full_path() + ' < ' + poller_targets['Resort_Modeller'].full_path() / 'poll_Resort_Modeller_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test SAuth', bash, args: ['-c', challenge_SAuth.full_path() + ' < ' + poller_targets['SAuth'].full_path() / 'poll_SAuth_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test SCUBA_Dive_Logging', bash, args: ['-c', challenge_SCUBA_Dive_Logging.full_path() + ' < ' + poller_targets['SCUBA_Dive_Logging'].full_path() / 'poll_SCUBA_Dive_Logging_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test SFTSCBSISS', bash, args: ['-c', challenge_SFTSCBSISS.full_path() + ' < ' + poller_targets['SFTSCBSISS'].full_path() / 'poll_SFTSCBSISS_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test SIGSEGV', bash, args: ['-c', challenge_SIGSEGV.full_path() + ' < ' + poller_targets['SIGSEGV'].full_path() / 'poll_SIGSEGV_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test SLUR_reference_implementation', bash, args: ['-c', challenge_SLUR_reference_implementation.full_path() + ' < ' + poller_targets['SLUR_reference_implementation'].full_path() / 'poll_SLUR_reference_implementation_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test SOLFEDGE', bash, args: ['-c', challenge_SOLFEDGE.full_path() + ' < ' + poller_targets['SOLFEDGE'].full_path() / 'poll_SOLFEDGE_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test SPIFFS', bash, args: ['-c', challenge_SPIFFS.full_path() + ' < ' + poller_targets['SPIFFS'].full_path() / 'poll_SPIFFS_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Sad_Face_Template_Engine_SFTE', bash, args: ['-c', challenge_Sad_Face_Template_Engine_SFTE.full_path() + ' < ' + poller_targets['Sad_Face_Template_Engine_SFTE'].full_path() / 'poll_Sad_Face_Template_Engine_SFTE_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Sample_Shipgame', bash, args: ['-c', challenge_Sample_Shipgame.full_path() + ' < ' + poller_targets['Sample_Shipgame'].full_path() / 'poll_Sample_Shipgame_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Scrum_Database', bash, args: ['-c', challenge_Scrum_Database.full_path() + ' < ' + poller_targets['Scrum_Database'].full_path() / 'poll_Scrum_Database_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Secure_Compression', bash, args: ['-c', challenge_Secure_Compression.full_path() + ' < ' + poller_targets['Secure_Compression'].full_path() / 'poll_Secure_Compression_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Sensr', bash, args: ['-c', challenge_Sensr.full_path() + ' < ' + poller_targets['Sensr'].full_path() / 'poll_Sensr_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Shortest_Path_Tree_Calculator', bash, args: ['-c', challenge_Shortest_Path_Tree_Calculator.full_path() + ' < ' + poller_targets['Shortest_Path_Tree_Calculator'].full_path() / 'poll_Shortest_Path_Tree_Calculator_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test ShoutCTF', bash, args: ['-c', challenge_ShoutCTF.full_path() + ' < ' + poller_targets['ShoutCTF'].full_path() / 'poll_ShoutCTF_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Simple_Stack_Machine', bash, args: ['-c', challenge_Simple_Stack_Machine.full_path() + ' < ' + poller_targets['Simple_Stack_Machine'].full_path() / 'poll_Simple_Stack_Machine_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Sorter', bash, args: ['-c', challenge_Sorter.full_path() + ' < ' + poller_targets['Sorter'].full_path() / 'poll_Sorter_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Space_Attackers', bash, args: ['-c', challenge_Space_Attackers.full_path() + ' < ' + poller_targets['Space_Attackers'].full_path() / 'poll_Space_Attackers_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Square_Rabbit', bash, args: ['-c', challenge_Square_Rabbit.full_path() + ' < ' + poller_targets['Square_Rabbit'].full_path() / 'poll_Square_Rabbit_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Street_map_service', bash, args: ['-c', challenge_Street_map_service.full_path() + ' < ' + poller_targets['Street_map_service'].full_path() / 'poll_Street_map_service_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test String_Info_Calculator', bash, args: ['-c', challenge_String_Info_Calculator.full_path() + ' < ' + poller_targets['String_Info_Calculator'].full_path() / 'poll_String_Info_Calculator_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test String_Storage_and_Retrieval', bash, args: ['-c', challenge_String_Storage_and_Retrieval.full_path() + ' < ' + poller_targets['String_Storage_and_Retrieval'].full_path() / 'poll_String_Storage_and_Retrieval_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test TAINTEDLOVE', bash, args: ['-c', challenge_TAINTEDLOVE.full_path() + ' < ' + poller_targets['TAINTEDLOVE'].full_path() / 'poll_TAINTEDLOVE_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test TIACA', bash, args: ['-c', challenge_TIACA.full_path() + ' < ' + poller_targets['TIACA'].full_path() / 'poll_TIACA_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test TVS', bash, args: ['-c', challenge_TVS.full_path() + ' < ' + poller_targets['TVS'].full_path() / 'poll_TVS_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Tennis_Ball_Motion_Calculator', bash, args: ['-c', challenge_Tennis_Ball_Motion_Calculator.full_path() + ' < ' + poller_targets['Tennis_Ball_Motion_Calculator'].full_path() / 'poll_Tennis_Ball_Motion_Calculator_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Terrible_Ticket_Tracker', bash, args: ['-c', challenge_Terrible_Ticket_Tracker.full_path() + ' < ' + poller_targets['Terrible_Ticket_Tracker'].full_path() / 'poll_Terrible_Ticket_Tracker_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Thermal_Controller_v2', bash, args: ['-c', challenge_Thermal_Controller_v2.full_path() + ' < ' + poller_targets['Thermal_Controller_v2'].full_path() / 'poll_Thermal_Controller_v2_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Thermal_Controller_v3', bash, args: ['-c', challenge_Thermal_Controller_v3.full_path() + ' < ' + poller_targets['Thermal_Controller_v3'].full_path() / 'poll_Thermal_Controller_v3_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Tick-A-Tack', bash, args: ['-c', challenge_Tick_A_Tack.full_path() + ' < ' + poller_targets['Tick-A-Tack'].full_path() / 'poll_Tick-A-Tack_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test UTF-late', bash, args: ['-c', challenge_UTF_late.full_path() + ' < ' + poller_targets['UTF-late'].full_path() / 'poll_UTF-late_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test User_Manager', bash, args: ['-c', challenge_User_Manager.full_path() + ' < ' + poller_targets['User_Manager'].full_path() / 'poll_User_Manager_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test ValveChecks', bash, args: ['-c', challenge_ValveChecks.full_path() + ' < ' + poller_targets['ValveChecks'].full_path() / 'poll_ValveChecks_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Vector_Graphics_2', bash, args: ['-c', challenge_Vector_Graphics_2.full_path() + ' < ' + poller_targets['Vector_Graphics_2'].full_path() / 'poll_Vector_Graphics_2_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Vector_Graphics_Format', bash, args: ['-c', challenge_Vector_Graphics_Format.full_path() + ' < ' + poller_targets['Vector_Graphics_Format'].full_path() / 'poll_Vector_Graphics_Format_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Venture_Calculator', bash, args: ['-c', challenge_Venture_Calculator.full_path() + ' < ' + poller_targets['Venture_Calculator'].full_path() / 'poll_Venture_Calculator_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test Virtual_Machine', bash, args: ['-c', challenge_Virtual_Machine.full_path() + ' < ' + poller_targets['Virtual_Machine'].full_path() / 'poll_Virtual_Machine_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test WhackJack', bash, args: ['-c', challenge_WhackJack.full_path() + ' < ' + poller_targets['WhackJack'].full_path() / 'poll_WhackJack_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
# test('test WordCompletion', bash, args: ['-c', challenge_WordCompletion.full_path() + ' < ' + poller_targets['WordCompletion'].full_path() / 'poll_WordCompletion_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test XStore', bash, args: ['-c', challenge_XStore.full_path() + ' < ' + poller_targets['XStore'].full_path() / 'poll_XStore_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test anagram_game', bash, args: ['-c', challenge_anagram_game.full_path() + ' < ' + poller_targets['anagram_game'].full_path() / 'poll_anagram_game_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test basic_emulator', bash, args: ['-c', challenge_basic_emulator.full_path() + ' < ' + poller_targets['basic_emulator'].full_path() / 'poll_basic_emulator_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
# test('test basic_messaging', bash, args: ['-c', challenge_basic_messaging.full_path() + ' < ' + poller_targets['basic_messaging'].full_path() / 'poll_basic_messaging_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test chess_mimic', bash, args: ['-c', challenge_chess_mimic.full_path() + ' < ' + poller_targets['chess_mimic'].full_path() / 'poll_chess_mimic_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
# test('test commerce_webscale', bash, args: ['-c', challenge_commerce_webscale.full_path() + ' < ' + poller_targets['commerce_webscale'].full_path() / 'poll_commerce_webscale_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test cotton_swab_arithmetic', bash, args: ['-c', challenge_cotton_swab_arithmetic.full_path() + ' < ' + poller_targets['cotton_swab_arithmetic'].full_path() / 'poll_cotton_swab_arithmetic_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test cyber_blogger', bash, args: ['-c', challenge_cyber_blogger.full_path() + ' < ' + poller_targets['cyber_blogger'].full_path() / 'poll_cyber_blogger_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test electronictrading', bash, args: ['-c', challenge_electronictrading.full_path() + ' < ' + poller_targets['electronictrading'].full_path() / 'poll_electronictrading_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test greeter', bash, args: ['-c', challenge_greeter.full_path() + ' < ' + poller_targets['greeter'].full_path() / 'poll_greeter_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
# test('test hawaii_sets', bash, args: ['-c', challenge_hawaii_sets.full_path() + ' < ' + poller_targets['hawaii_sets'].full_path() / 'poll_hawaii_sets_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test humaninterface', bash, args: ['-c', challenge_humaninterface.full_path() + ' < ' + poller_targets['humaninterface'].full_path() / 'poll_humaninterface_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test matrices_for_sale', bash, args: ['-c', challenge_matrices_for_sale.full_path() + ' < ' + poller_targets['matrices_for_sale'].full_path() / 'poll_matrices_for_sale_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
# test('test middleout', bash, args: ['-c', challenge_middleout.full_path() + ' < ' + poller_targets['middleout'].full_path() / 'poll_middleout_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test middleware_handshake', bash, args: ['-c', challenge_middleware_handshake.full_path() + ' < ' + poller_targets['middleware_handshake'].full_path() / 'poll_middleware_handshake_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
# test('test netstorage', bash, args: ['-c', challenge_netstorage.full_path() + ' < ' + poller_targets['netstorage'].full_path() / 'poll_netstorage_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test online_job_application', bash, args: ['-c', challenge_online_job_application.full_path() + ' < ' + poller_targets['online_job_application'].full_path() / 'poll_online_job_application_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test online_job_application2', bash, args: ['-c', challenge_online_job_application2.full_path() + ' < ' + poller_targets['online_job_application2'].full_path() / 'poll_online_job_application2_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
# test('test payroll', bash, args: ['-c', challenge_payroll.full_path() + ' < ' + poller_targets['payroll'].full_path() / 'poll_payroll_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test pizza_ordering_system', bash, args: ['-c', challenge_pizza_ordering_system.full_path() + ' < ' + poller_targets['pizza_ordering_system'].full_path() / 'poll_pizza_ordering_system_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
# test('test reallystream', bash, args: ['-c', challenge_reallystream.full_path() + ' < ' + poller_targets['reallystream'].full_path() / 'poll_reallystream_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test root64_and_parcour', bash, args: ['-c', challenge_root64_and_parcour.full_path() + ' < ' + poller_targets['root64_and_parcour'].full_path() / 'poll_root64_and_parcour_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test router_simulator', bash, args: ['-c', challenge_router_simulator.full_path() + ' < ' + poller_targets['router_simulator'].full_path() / 'poll_router_simulator_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test simpleOCR', bash, args: ['-c', challenge_simpleOCR.full_path() + ' < ' + poller_targets['simpleOCR'].full_path() / 'poll_simpleOCR_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test simple_integer_calculator', bash, args: ['-c', challenge_simple_integer_calculator.full_path() + ' < ' + poller_targets['simple_integer_calculator'].full_path() / 'poll_simple_integer_calculator_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test simplenote', bash, args: ['-c', challenge_simplenote.full_path() + ' < ' + poller_targets['simplenote'].full_path() / 'poll_simplenote_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test stack_vm', bash, args: ['-c', challenge_stack_vm.full_path() + ' < ' + poller_targets['stack_vm'].full_path() / 'poll_stack_vm_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test stream_vm', bash, args: ['-c', challenge_stream_vm.full_path() + ' < ' + poller_targets['stream_vm'].full_path() / 'poll_stream_vm_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test stream_vm2', bash, args: ['-c', challenge_stream_vm2.full_path() + ' < ' + poller_targets['stream_vm2'].full_path() / 'poll_stream_vm2_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
# test('test tribute', bash, args: ['-c', challenge_tribute.full_path() + ' < ' + poller_targets['tribute'].full_path() / 'poll_tribute_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
# test('test university_enrollment', bash, args: ['-c', challenge_university_enrollment.full_path() + ' < ' + poller_targets['university_enrollment'].full_path() / 'poll_university_enrollment_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test vFilter', bash, args: ['-c', challenge_vFilter.full_path() + ' < ' + poller_targets['vFilter'].full_path() / 'poll_vFilter_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
# test('test virtual_pet', bash, args: ['-c', challenge_virtual_pet.full_path() + ' < ' + poller_targets['virtual_pet'].full_path() / 'poll_virtual_pet_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
test('test yolodex', bash, args: ['-c', challenge_yolodex.full_path() + ' < ' + poller_targets['yolodex'].full_path() / 'poll_yolodex_0.poll'], env: {'LD_LIBRARY_PATH': meson.build_root() / 'lib'})
